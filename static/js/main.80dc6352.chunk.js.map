{"version":3,"sources":["App.js","serviceWorker.js","ui/theme/index.js","i18n.js","index.js"],"names":["intervalId","taskTime","breakTime","startTaskAction","startBreakAction","App","_useState","useState","_useState2","Object","slicedToArray","onTask","setOnTask","_useState3","_useState4","timerGoing","setTimerGoing","_useState5","_useState6","secondsLeft","setSecondsLeft","t","useTranslation","window","navigator","serviceWorker","addEventListener","event","startTimer","useEffect","Notification","requestPermission","clearInterval","reset","newOnTask","endTime","Date","setSeconds","getSeconds","setInterval","delta","now","prevOnTask","config","vibrate","requireInteraction","renotify","tag","title","lang","objectSpread","body","actions","action","ready","then","registration","showNotification","sendNotification","diff","Math","floor","react_default","a","createElement","Grid_default","container","direction","justify","alignItems","className","toString","padStart","Button_default","onClick","disabled","color","variant","autoFocus","FormControlLabel_default","control","Switch_default","checked","onChange","target","label","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","createMuiTheme","palette","primary","main","themeName","typography","useNextVariants","i18n","use","initReactI18next","init","resources","en","translation","Reset","Start Task","Start Break","On Task","lng","keySeparator","interpolation","escapeValue","ReactDOM","render","styles","theme","muiTheme","src_App","document","getElementById","URL","process","origin","concat","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"qGAgBIA,+IAJEC,EAAW,KACXC,EAAY,IACZC,EAAkB,aAClBC,EAAmB,cAkIVC,MA/Hf,WAAe,IAAAC,EACeC,oBAAS,GADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEuBN,oBAAS,GAFhCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEME,EAFNF,EAAA,GAAAG,EAGyBV,mBAASN,GAHlCiB,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGOE,EAHPF,EAAA,GAILG,EAAMC,cAAND,EAGJ,kBAAmBE,OAAOC,WAC5BD,OAAOC,UAAUC,cAAcC,iBAAiB,UAAW,SAAAC,GACzDC,GAAYjB,KAKhBkB,oBAAU,WAER,OADAC,aAAaC,oBACN,WACLC,cAAchC,KAEf,IAGH,IAgCMiC,EAAQ,SAAAC,GACZF,cAAchC,GACdgB,GAAc,GACdI,EAAec,EAAYjC,EAAWC,IAIlC0B,EAAa,SAAAM,GACjBlB,GAAc,GAEd,IAAImB,EAAU,IAAIC,KAClBD,EAAQE,WAAWF,EAAQG,aAAenB,GAC1Ca,cAAchC,GACdA,EAAauC,YAAY,WACvB,IAAMC,EAAQL,EAAUC,KAAKK,MAC7B,GAAID,GAAS,EACX5B,EAAUsB,GACVD,EAAMC,GAjDa,SAAAQ,GACvB,IAAIC,EAAS,CACXC,QAAS,CAAC,IAAK,GAAI,KACnBC,oBAAoB,EACpBC,UAAU,EACVC,IAAK,WACLC,MAAO,GACPC,KAAM,SAUNN,EARGD,EAQGjC,OAAAyC,EAAA,EAAAzC,CAAA,GACDkC,EADC,CAEJK,MAAO,gBACPG,KAAM,0BACNC,QAAS,CAAC,CAAEC,OAAQjD,EAAkB4C,MAAO,kBAXzCvC,OAAAyC,EAAA,EAAAzC,CAAA,GACDkC,EADC,CAEJK,MAAO,0BACPG,KAAM,8BACNC,QAAS,CAAC,CAAEC,OAAQlD,EAAiB6C,MAAO,iBAU5C,kBAAmBzB,OAAOC,WAC5BD,OAAOC,UAAUC,cAAc6B,MAAMC,KAAK,SAAAC,GACxCA,EAAaC,iBAAiBd,EAAOK,MAAOL,KAwB5Ce,EAAkBxB,OACb,CACL,IAAMyB,EAAOC,KAAKC,MAAMrB,EAAQ,KAC5BmB,IAASxC,GACXC,EAAeuC,KAGlB,MAEL,OACEG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,WAAS,EACTC,UAAU,SACVC,QAAQ,gBACRC,WAAW,SACXC,UAAU,aAEVR,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC7DP,EAAAC,EAAAC,cAAA,MAAIM,UAAU,SAAd,YACAR,EAAAC,EAAAC,cAAA,UACGJ,KAAKC,MAAM1C,EAAc,IACvBoD,WACAC,SAAS,EAAG,KAHjB,KAIKrD,EAAc,IAAIoD,WAAWC,SAAS,EAAG,MAE9CV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,QAAS,kBAAM9C,GAAYjB,IAC3BgE,SAAU5D,EACV6D,MAAM,UACNC,QAAQ,YACRC,WAAS,GAECzD,EAATV,EAAW,aAAkB,gBAEhCmD,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQW,QAAS,kBAAMzC,EAAMtB,KAAUU,EAAE,UACzCyC,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACEiB,QACElB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,QAASvE,EACTwE,SAAU,SAAAxD,GACRf,EAAUe,EAAMyD,OAAOF,SACvBjD,EAAMN,EAAMyD,OAAOF,UAErBP,SAAU5D,EACV6D,MAAM,YAGVS,MAAOhE,EAAE,cAGbyC,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQuB,KAAK,+BAAb,cChIAC,EAAcC,QACW,cAA7BjE,OAAOkE,SAASC,UAEe,UAA7BnE,OAAOkE,SAASC,UAEhBnE,OAAOkE,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOlD,GAC9BnB,UAAUC,cACPqE,SAASD,GACTtC,KAAK,SAAAC,GACJA,EAAauC,cAAgB,WAC3B,IAAMC,EAAmBxC,EAAayC,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf3E,UAAUC,cAAc2E,YAI1BC,QAAQC,IACN,iHAKE3D,GAAUA,EAAO4D,UACnB5D,EAAO4D,SAAS/C,KAMlB6C,QAAQC,IAAI,sCAGR3D,GAAUA,EAAO6D,WACnB7D,EAAO6D,UAAUhD,UAO5BiD,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,iBCzFlDC,2BAAe,CAC5BC,QAJc,CAAEC,QAAS,CAAEC,KAAM,YAKjCC,UAJgB,4BAKhBC,WAAY,CACVC,iBAAiB,aCKrBC,IACGC,IAAIC,KACJC,KAAK,CACJC,UAdc,CAChBC,GAAI,CACFC,YAAa,CACXC,MAAO,QACPC,aAAc,aACdC,cAAe,cACfC,UAAW,aASbC,IAAK,KAELC,cAAc,EAEdC,cAAe,CACbC,aAAa,KAIJd,EAAf,ECpBAe,IAASC,OACPpE,EAAAC,EAAAC,cAACmE,EAAA,iBAAD,CAAkBC,MAAOC,GACvBvE,EAAAC,EAAAC,cAACsE,EAAD,OAEFC,SAASC,eAAe,SHSnB,SAAkB7F,GACvB,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIiH,IAAIC,GAAwBnH,OAAOkE,SAASH,MACpDqD,SAAWpH,OAAOkE,SAASkD,OAIvC,OAGFpH,OAAOG,iBAAiB,OAAQ,WAC9B,IAAMmE,EAAK,GAAA+C,OAAMF,GAAN,sBAEPnD,GAgEV,SAAiCM,EAAOlD,GAEtCkG,MAAMhD,GACHtC,KAAK,SAAAuF,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3H,UAAUC,cAAc6B,MAAMC,KAAK,SAAAC,GACjCA,EAAa4F,aAAa7F,KAAK,WAC7BhC,OAAOkE,SAAS4D,aAKpBzD,EAAgBC,EAAOlD,KAG1B8D,MAAM,WACLJ,QAAQC,IACN,mEArFAgD,CAAwBzD,EAAOlD,GAI/BnB,UAAUC,cAAc6B,MAAMC,KAAK,WACjC8C,QAAQC,IACN,gHAMJV,EAAgBC,EAAOlD,MG/B/BlB","file":"static/js/main.80dc6352.chunk.js","sourcesContent":["/**\n * This code is junk, and you're best not to believe any of it is even working.\n * @flow\n */\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport \"./App.css\";\nimport { useTranslation } from \"react-i18next\";\nimport Switch from \"@material-ui/core/Switch\";\n\nconst taskTime = 25 * 60;\nconst breakTime = 5 * 60;\nconst startTaskAction = \"start_task\";\nconst startBreakAction = \"start_break\";\nlet intervalId: IntervalID | null;\n\nfunction App() {\n  const [onTask, setOnTask] = useState(true);\n  const [timerGoing, setTimerGoing] = useState(false);\n  const [secondsLeft, setSecondsLeft] = useState(taskTime);\n  const { t } = useTranslation();\n\n  // Listen for the service worker to tell us when the user interacted with one of the notification actions\n  if (\"serviceWorker\" in window.navigator) {\n    window.navigator.serviceWorker.addEventListener(\"message\", event => {\n      startTimer(!onTask);\n    });\n  }\n\n  // Handle the basic setup and teardown at app time\n  useEffect(() => {\n    Notification.requestPermission();\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Send a notification\n  const sendNotification = prevOnTask => {\n    let config = {\n      vibrate: [300, 50, 300],\n      requireInteraction: true,\n      renotify: true,\n      tag: \"pomodoro\",\n      title: \"\",\n      lang: \"en-US\"\n    };\n    if (!prevOnTask) {\n      config = {\n        ...config,\n        title: \"Ready for next pomodoro\",\n        body: \"Break's over, back to work!\",\n        actions: [{ action: startTaskAction, title: \"Start Task\" }]\n      };\n    } else {\n      config = {\n        ...config,\n        title: \"Pomodoro done\",\n        body: \"Phew! Time for a break.\",\n        actions: [{ action: startBreakAction, title: \"Start Break\" }]\n      };\n    }\n    if (\"serviceWorker\" in window.navigator) {\n      window.navigator.serviceWorker.ready.then(registration => {\n        registration.showNotification(config.title, config);\n      });\n    }\n  };\n\n  // Reset the timer UI\n  const reset = newOnTask => {\n    clearInterval(intervalId);\n    setTimerGoing(false);\n    setSecondsLeft(newOnTask ? taskTime : breakTime);\n  };\n\n  // Start the timer UI\n  const startTimer = newOnTask => {\n    setTimerGoing(true);\n\n    let endTime = new Date();\n    endTime.setSeconds(endTime.getSeconds() + secondsLeft);\n    clearInterval(intervalId);\n    intervalId = setInterval(() => {\n      const delta = endTime - Date.now();\n      if (delta <= 0) {\n        setOnTask(newOnTask);\n        reset(newOnTask);\n        sendNotification(!newOnTask);\n      } else {\n        const diff = Math.floor(delta / 1000);\n        if (diff !== secondsLeft) {\n          setSecondsLeft(diff);\n        }\n      }\n    }, 100);\n  };\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"space-between\"\n      alignItems=\"center\"\n      className=\"outerGrid\"\n    >\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <h1 className=\"title\">Pomodoro</h1>\n        <h1>\n          {Math.floor(secondsLeft / 60)\n            .toString()\n            .padStart(2, \"0\")}\n          :{(secondsLeft % 60).toString().padStart(2, \"0\")}\n        </h1>\n        <Button\n          onClick={() => startTimer(!onTask)}\n          disabled={timerGoing}\n          color=\"primary\"\n          variant=\"contained\"\n          autoFocus\n        >\n          {onTask ? t(\"Start Task\") : t(\"Start Break\")}\n        </Button>\n        <Button onClick={() => reset(onTask)}>{t(\"Reset\")}</Button>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={onTask}\n              onChange={event => {\n                setOnTask(event.target.checked);\n                reset(event.target.checked);\n              }}\n              disabled={timerGoing}\n              color=\"primary\"\n            />\n          }\n          label={t(\"On Task\")}\n        />\n      </Grid>\n      <Button href=\"https://twitter.com/turnrye\">@turnrye</Button>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/ui/theme/index.js\n\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst palette = { primary: { main: \"#ff6347\" } };\nconst themeName = \"Persimmon Razzmatazz Cats\";\n\nexport default createMuiTheme({\n  palette,\n  themeName,\n  typography: {\n    useNextVariants: true\n  }\n});\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  en: {\n    translation: {\n      Reset: \"Reset\",\n      \"Start Task\": \"Start Task\",\n      \"Start Break\": \"Start Break\",\n      \"On Task\": \"On Task\"\n    }\n  }\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    }\n  });\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport muiTheme from \"./ui/theme\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport \"./i18n\";\n\nReactDOM.render(\n  <MuiThemeProvider theme={muiTheme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}